@using gitPipeline.Data
@using Microsoft.AspNetCore.Components
@inject IJSRuntime JSRuntime

<style>
    .warning-alert {
        color: #000;
        background-color: #f28b2b;
        border-color: #ffeeba;
        display: flex;
        align-items: center;
    }

    .warning-alert .icon-pencil {
        color: #856404;
    }

    .dismiss-button {
        margin-left: auto;
        cursor: pointer;
    }
</style>

<div id="maintainacePopUP" class="alert warning-alert mt-4" style="@(IsMaintenanceDismissed ? "display: none;" : "")">
    <span class="icon-pencil me-2" aria-hidden="true"></span>

    <strong>@Title</strong>
    @if (!string.IsNullOrEmpty(MaintenanceTime))
    {
        <span class="text-nowrap">
            : Downtime will be at @MaintenanceTime
        </span>
    }
    else
    {
        <span class="text-nowrap">
            : No scheduled maintenance
        </span>
    }
    <span class="dismiss-button" @onclick="DismissMaintenance">
        Dismiss
    </span>
</div>

@code {
    [Parameter]
    public string? Title { get; set; }

    [Inject]
    public AdminManagement AdminManagementComponent { get; set; }

    private string MaintenanceTime { get; set; }
    private bool IsMaintenanceDismissed { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await LoadMaintenanceRequests();
        MaintenanceTime = GetMaintenanceTime();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            IsMaintenanceDismissed = await IsMaintenanceDismissedFromStorage();
            StateHasChanged();
        }
    }

    private async Task LoadMaintenanceRequests()
    {
        await AdminManagementComponent.CheckMaintenance();
    }

    private async Task<bool> IsMaintenanceDismissedFromStorage()
    {
        // Use JavaScript interop to access sessionStorage
        var result = await JSRuntime.InvokeAsync<string>("sessionStorage.getItem", "maintenanceDismissed");

        if (result != null && bool.TryParse(result, out var dismissed))
        {
            return dismissed;
        }

        return false;
    }


    private async Task DismissMaintenance()
    {
        IsMaintenanceDismissed = true;

        // Use JavaScript interop to store the dismissal flag in sessionStorage
        await JSRuntime.InvokeVoidAsync("sessionStorage.setItem", "maintenanceDismissed", IsMaintenanceDismissed.ToString());
    }

    private string GetMaintenanceTime()
    {
        if (AdminManagementComponent.MaintenanceRequests.Count > 0)
        {
            var latestMaintenanceRequest = AdminManagementComponent.MaintenanceRequests.OrderByDescending(m => m.Date).FirstOrDefault();

            var timeString = latestMaintenanceRequest.Time.ToString("hh:mm tt");
            var timezone = "EST"; // Replace with the actual timezone abbreviation

            return $"{timeString} - {timezone}";
        }

        return "";
    }

}
