name: Build and deploy .NET Core app to IIS

on:
  pull_request:
    types:
      - closed
    branches:
      - master

env:
  PUBLISH_DIR: 'C:\actions-runner\_work\gitPipeline\gitPipeline\myapp'
  WEBSITE_DIR: 'E:\testSite\gitPipeline\bin\Debug\net6.0\publish'
  IIS_SITE_NAME: gitPipeline
  IIS_PAGEDOWN_NAME: pagedown

jobs:
  build-and-deploy:
    if: >
      github.event.pull_request.merged == true &&
      github.event.pull_request.base.ref == 'master' &&
      github.event.pull_request.head.ref == 'dev'
    runs-on: self-hosted

    steps:
      # Check if it is time to perform the maintenance
      - name: Check maintenance schedule
        id: maintenance-check
        shell: cmd
        run: |
          for /f %%i in ('curl -s http://localhost:8081/maintenance') do set maintenance_time=%%i
          for /f %%i in ('powershell -Command "Get-Date -Format yyyy-MM-dd HH:mm:ss"') do set current_time=%%i
          if "%current_time%" LSS "%maintenance_time%" (
            powershell -Command "$sleep_duration = [DateTime]::ParseExact('%maintenance_time%', 'yyyy-MM-dd HH:mm:ss', $null) - [DateTime]::ParseExact('%current_time%', 'yyyy-MM-dd HH:mm:ss', $null); Start-Sleep -Seconds $sleep_duration.TotalSeconds"
          )
          echo "Maintenance time reached."


      # Checkout code
      - name: Checkout code
        uses: actions/checkout@v2

      # Setup .NET Core
      - name: Setup .NET Core
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: '6.0.x'

      # Cache dependencies
      - name: Cache dependencies
        uses: actions/cache@v2
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-dotnet-${{ hashFiles('**/MyProject.csproj') }}
          restore-keys: ${{ runner.os }}-dotnet-

      # Stop IIS site main WEBSITE
      - name: Stop IIS site
        shell: cmd
        run: C:\Windows\System32\inetsrv\appcmd stop site /site.name:"${{ env.IIS_SITE_NAME }}"

      # Stop the w3wp.exe process
      - name: Stop w3wp.exe process
        shell: cmd
        run: taskkill /F /IM w3wp.exe /T

      # Start IIS site Pagedown
      - name: Start IIS site
        shell: cmd
        run: C:\Windows\System32\inetsrv\appcmd start site /site.name:"${{ env.IIS_PAGEDOWN_NAME }}"
        
      # Build with dotnet
      - name: Build with dotnet
        shell: cmd
        run: dotnet build -c Release

      # Publish with dotnet
      - name: Publish with dotnet
        shell: cmd
        run: dotnet publish -c Release -o ${{ env.PUBLISH_DIR }}

      # Copy files to website directory
      - name: Copy files to website directory
        shell: cmd
        run: xcopy /s /y /f ${{ env.PUBLISH_DIR }}\* ${{ env.WEBSITE_DIR }}
        
      # Stop IIS site [WEBSITE]
      - name: Stop IIS site
        shell: cmd
        run: C:\Windows\System32\inetsrv\appcmd stop site /site.name:"${{ env.IIS_PAGEDOWN_NAME }}"

      # Start IIS site [WEBSITE]
      - name: Start IIS site
        shell: cmd
        run: C:\Windows\System32\inetsrv\appcmd start site /site.name:"${{ env.IIS_SITE_NAME }}"
